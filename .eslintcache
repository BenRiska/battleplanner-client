[{"/Users/Ben/Desktop/battleplanner-client/src/index.js":"1","/Users/Ben/Desktop/battleplanner-client/src/reportWebVitals.js":"2","/Users/Ben/Desktop/battleplanner-client/src/ApolloProvider.js":"3","/Users/Ben/Desktop/battleplanner-client/src/App.js":"4","/Users/Ben/Desktop/battleplanner-client/src/pages/Home.js":"5","/Users/Ben/Desktop/battleplanner-client/src/pages/Login.js":"6","/Users/Ben/Desktop/battleplanner-client/src/pages/Tournament.js":"7","/Users/Ben/Desktop/battleplanner-client/src/context/auth.js":"8","/Users/Ben/Desktop/battleplanner-client/src/pages/Register.js":"9","/Users/Ben/Desktop/battleplanner-client/src/utils/AuthRoute.js":"10","/Users/Ben/Desktop/battleplanner-client/src/utils/queries.js":"11","/Users/Ben/Desktop/battleplanner-client/src/utils/hooks.js":"12","/Users/Ben/Desktop/battleplanner-client/src/components/NavBar.js":"13","/Users/Ben/Desktop/battleplanner-client/src/components/PreGameInfo.js":"14","/Users/Ben/Desktop/battleplanner-client/src/components/EditTournament.js":"15","/Users/Ben/Desktop/battleplanner-client/src/components/TournamentCard.js":"16","/Users/Ben/Desktop/battleplanner-client/src/components/TournamentForm.js":"17","/Users/Ben/Desktop/battleplanner-client/src/components/TournamentPanel.js":"18","/Users/Ben/Desktop/battleplanner-client/src/components/PlayerStatusBar.js":"19","/Users/Ben/Desktop/battleplanner-client/src/components/Rules.js":"20","/Users/Ben/Desktop/battleplanner-client/src/components/RoundSummary.js":"21","/Users/Ben/Desktop/battleplanner-client/src/components/Restrictions.js":"22","/Users/Ben/Desktop/battleplanner-client/src/components/Participants.js":"23","/Users/Ben/Desktop/battleplanner-client/src/components/Rule.js":"24","/Users/Ben/Desktop/battleplanner-client/src/components/Restriction.js":"25","/Users/Ben/Desktop/battleplanner-client/src/components/Participant.js":"26"},{"size":457,"mtime":1611249822107,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1611249822108,"results":"29","hashOfConfig":"28"},{"size":744,"mtime":1611249822104,"results":"30","hashOfConfig":"28"},{"size":824,"mtime":1611403494218,"results":"31","hashOfConfig":"28"},{"size":1223,"mtime":1611403986648,"results":"32","hashOfConfig":"28"},{"size":1927,"mtime":1611249822107,"results":"33","hashOfConfig":"28"},{"size":2209,"mtime":1611407259678,"results":"34","hashOfConfig":"28"},{"size":2051,"mtime":1611256701046,"results":"35","hashOfConfig":"28"},{"size":2814,"mtime":1611249822107,"results":"36","hashOfConfig":"28"},{"size":611,"mtime":1611339758385,"results":"37","hashOfConfig":"28"},{"size":5207,"mtime":1611407484681,"results":"38","hashOfConfig":"28"},{"size":396,"mtime":1611249822111,"results":"39","hashOfConfig":"28"},{"size":832,"mtime":1611405655442,"results":"40","hashOfConfig":"28"},{"size":2244,"mtime":1611327759467,"results":"41","hashOfConfig":"28"},{"size":1898,"mtime":1611249822104,"results":"42","hashOfConfig":"28"},{"size":1260,"mtime":1611340654051,"results":"43","hashOfConfig":"28"},{"size":1559,"mtime":1611326781738,"results":"44","hashOfConfig":"28"},{"size":7305,"mtime":1611405333371,"results":"45","hashOfConfig":"28"},{"size":930,"mtime":1611249822105,"results":"46","hashOfConfig":"28"},{"size":1714,"mtime":1611325984620,"results":"47","hashOfConfig":"28"},{"size":1652,"mtime":1611339460481,"results":"48","hashOfConfig":"28"},{"size":1955,"mtime":1611325311016,"results":"49","hashOfConfig":"28"},{"size":2116,"mtime":1611404614273,"results":"50","hashOfConfig":"28"},{"size":1203,"mtime":1611325960525,"results":"51","hashOfConfig":"28"},{"size":1318,"mtime":1611325262270,"results":"52","hashOfConfig":"28"},{"size":1406,"mtime":1611404628382,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"15uvemw",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Ben/Desktop/battleplanner-client/src/index.js",[],["110","111"],"/Users/Ben/Desktop/battleplanner-client/src/reportWebVitals.js",[],"/Users/Ben/Desktop/battleplanner-client/src/ApolloProvider.js",[],"/Users/Ben/Desktop/battleplanner-client/src/App.js",["112"],"import { BrowserRouter as Router, Switch} from 'react-router-dom';\nimport { AuthProvider } from './context/auth';\nimport {useState} from \"react\"\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Tournament from './pages/Tournament';\nimport AuthRoute from './utils/AuthRoute';\n\nfunction App() {\n\n  return (\n    <AuthProvider>\n      <Router>\n          <Switch>\n            <AuthRoute exact redirectIfNotSignedIn path=\"/\" component={Home} />\n            <AuthRoute exact path=\"/login\" component={Login} />\n            <AuthRoute exact path=\"/register\" component={Register} />\n            <AuthRoute exact redirectIfNotSignedIn path=\"/tournament/:id\" component={Tournament}  />\n          </Switch>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","/Users/Ben/Desktop/battleplanner-client/src/pages/Home.js",[],"/Users/Ben/Desktop/battleplanner-client/src/pages/Login.js",[],"/Users/Ben/Desktop/battleplanner-client/src/pages/Tournament.js",[],"/Users/Ben/Desktop/battleplanner-client/src/context/auth.js",[],"/Users/Ben/Desktop/battleplanner-client/src/pages/Register.js",[],"/Users/Ben/Desktop/battleplanner-client/src/utils/AuthRoute.js",[],"/Users/Ben/Desktop/battleplanner-client/src/utils/queries.js",[],"/Users/Ben/Desktop/battleplanner-client/src/utils/hooks.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/NavBar.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/PreGameInfo.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/EditTournament.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/TournamentCard.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/TournamentForm.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/TournamentPanel.js",["113"],"import React, {useState, useEffect, useContext} from 'react'\nimport {useMutation} from '@apollo/react-hooks';\nimport {useHistory} from \"react-router-dom\"\nimport { AuthContext } from '../context/auth';\nimport \"../styles/tournament/TournamentPanel.css\"\nimport RoundSummary from './RoundSummary';\nimport {END_FIGHT_QUERY, DELETE_TOURNAMENT_QUERY, FETCH_TOURNAMENTS_QUERY, FETCH_TOURNAMENT_QUERY, START_NEXT_ROUND_QUERY} from \"../utils/queries\"\n\nfunction TournamentPanel({tournament, setRoundLosers, setRoundWinners}) {\n\n    const [currentFight, setCurrentFight] = useState(null)\n    const [remainingFights, setRemainingFights] = useState([])\n\n    const { user } = useContext(AuthContext);\n\n    const history = useHistory()\n\n\n    useEffect(() => {\n        let upcomingFights = tournament?.fights?.filter(fight => (fight.concluded === false))\n\n        console.log(upcomingFights)\n\n        if(upcomingFights?.length === 1 && upcomingFights){\n            setCurrentFight(upcomingFights[0])\n        } else if (upcomingFights){\n            setCurrentFight(upcomingFights[0])\n            upcomingFights = upcomingFights.slice(1, upcomingFights.length)\n            setRemainingFights(upcomingFights)\n        }\n    }, [])\n\n    const [endFight] = useMutation(END_FIGHT_QUERY, {\n        update(proxy, result){ \n            console.log(result.data.endFight)\n            proxy.writeQuery({\n              query: FETCH_TOURNAMENT_QUERY,\n              data: {getTournament: result.data.endFight},\n              variables: {username: user?.username}\n          })\n\n          let upcomingFights = result.data.endFight?.fights?.filter(fight => (fight.concluded === false))\n\n        if(upcomingFights?.length === 1 && upcomingFights){\n            setCurrentFight(upcomingFights[0])\n            setRemainingFights([])\n        } else if (upcomingFights){\n            setCurrentFight(upcomingFights[0])\n            upcomingFights = upcomingFights.slice(1, upcomingFights.length)\n            setRemainingFights(upcomingFights)\n        }\n\n        const completedFights = result.data.endFight?.fights?.filter(fight => (fight.concluded === true))\n\n        let winnerList = []\n        let loserList = []\n\n        completedFights?.forEach(fight => {\n            if(fight.fighterOne === fight.winner){\n                winnerList.push(fight.fighterOne)\n                loserList.push(fight.fighterTwo)\n            } else{\n                loserList.push(fight.fighterOne)\n                winnerList.push(fight.fighterTwo)\n            }\n        })\n\n        setRoundLosers(loserList)\n        setRoundWinners(winnerList)\n\n      },\n        onError(err) {\n            console.log(err);\n          }\n    })\n\n    const [deleteTournament] = useMutation(DELETE_TOURNAMENT_QUERY, {\n        update(proxy, result){ \n            proxy.writeQuery({\n              query: FETCH_TOURNAMENTS_QUERY,\n              data: {getTournaments: result.data.deleteTournament},\n              variables: {username: user?.username}\n          })\n          history.push(\"/\")\n      },\n        onError(err) {\n            console.log(err);\n          }\n    })\n\n    const [startNextRound] = useMutation(START_NEXT_ROUND_QUERY, {\n        update(proxy, result){ \n            proxy.writeQuery({\n              query: FETCH_TOURNAMENT_QUERY,\n              data: {getTournament: result.data.startNextRound},\n              variables: {username: user?.username}\n          })\n\n          let upcomingFights = result.data.startNextRound?.fights?.filter(fight => (fight.concluded === false))\n\n        if(upcomingFights?.length === 1 && upcomingFights){\n            setCurrentFight(upcomingFights[0])\n            setRemainingFights([])\n        } else if (upcomingFights){\n            setCurrentFight(upcomingFights[0])\n            upcomingFights = upcomingFights.slice(1, upcomingFights.length)\n            setRemainingFights(upcomingFights)\n        }\n\n        const completedFights = result.data.endFight?.fights?.filter(fight => (fight.concluded === true))\n\n        let winnerList = []\n        let loserList = []\n\n        completedFights?.forEach(fight => {\n            if(fight.fighterOne === fight.winner){\n                winnerList.push(fight.fighterOne)\n                loserList.push(fight.fighterTwo)\n            } else{\n                loserList.push(fight.fighterOne)\n                winnerList.push(fight.fighterTwo)\n            }\n        })\n\n        setRoundLosers(loserList)\n        setRoundWinners(winnerList)\n      },\n        onError: (err) => console.log(err)\n    })\n\n    const executeStartNextRound = () => {\n        startNextRound({variables: {tournamentName: tournament.name}})\n    }\n\n    const executeEndFight = (winner) => {\n        endFight({variables: {tournamentName: tournament.name, winner }})\n    }\n\n    const executeDeleteTournament = () => {\n        deleteTournament({variables: {tournamentName: tournament.name}})\n    }\n\n    const generateRestriction = () => {\n        const num = Math.floor(Math.random() * (tournament.restrictions.length))\n        alert(tournament.restrictions[num])\n    }\n\n    return (\n        <div className=\"tournamentPanel\">\n            {currentFight ? \n            (<>\n            <div className=\"tournamentPanel__main\">\n                <div className=\"tournamentPanel__current-fight\">\n                    <div className=\"vs\">Vs</div>\n                    <div className=\"current-fighter\">\n                        <img src=\"../ring.svg\" alt=\"ring icon\"/>\n                        <p>{currentFight?.fighterOne}</p>\n                        <button onClick={() => executeEndFight(currentFight?.fighterOne)}>Winner</button>\n                    </div>\n                    <div className=\"current-fighter\">\n                        <img src=\"../ring-right.svg\" alt=\"ring icon\"/>\n                        <p>{currentFight?.fighterTwo}</p>\n                        <button onClick={() => executeEndFight(currentFight?.fighterTwo)}>Winner</button>\n                    </div>\n                </div>\n                <div className=\"tournamentPanel__options\">\n                    <div className=\"tournamentPanel__options-box\">\n                        {tournament.restrictions.length > 1 && (<button onClick={generateRestriction} >Generate Restriction</button>)}\n                        <button className=\"red-btn\" onClick={executeDeleteTournament}>End Tournament</button>\n                    </div>\n                    <div className=\"tournamentPanel__round-card\">\n                        <span>Final</span>\n                        <span>{16}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"tournamentPanel__upcoming\">\n                <div className=\"upcoming__sign\">\n                    <span>Upcoming</span>\n                    <img src=\"../right-arrow.svg\" alt=\"arrow icon\"/>\n                </div>\n                {remainingFights?.map(fight => (\n                <div className=\"upcoming__card\">\n                    <span className=\"vs card-vs\">Vs</span>\n                    <span>{fight.fighterOne}</span>\n                    <span>{fight.fighterTwo}</span>\n                </div>\n                ))}\n            </div>\n            </>) : \n            <RoundSummary executeStartNextRound={executeStartNextRound} tournament={tournament}/>}\n        </div>\n    )\n}\n\nexport default TournamentPanel\n","/Users/Ben/Desktop/battleplanner-client/src/components/PlayerStatusBar.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/Rules.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/RoundSummary.js",["114"],"import React, {useContext} from 'react'\nimport \"../styles/tournament/RoundSummary.css\"\nimport {useMutation} from '@apollo/react-hooks';\nimport {useHistory} from \"react-router-dom\"\nimport { AuthContext } from '../context/auth';\nimport {DELETE_TOURNAMENT_QUERY, FETCH_TOURNAMENTS_QUERY, FETCH_TOURNAMENT_QUERY} from \"../utils/queries\"\n\n\nfunction RoundSummary({tournament, executeStartNextRound}) {\n\n    const history = useHistory()\n\n    const { user } = useContext(AuthContext);\n\n    const [deleteTournament] = useMutation(DELETE_TOURNAMENT_QUERY, {\n        update(proxy, result){ \n            proxy.writeQuery({\n              query: FETCH_TOURNAMENTS_QUERY,\n              data: {getTournaments: result.data.deleteTournament},\n              variables: {username: user?.username}\n          })\n          history.push(\"/\")\n      },\n        onError(err) {\n            console.log(err);\n          }\n    })\n\n    const executeDeleteTournament = () => {\n        deleteTournament({variables: {tournamentName: tournament.name}})\n    }\n\n    return (\n        <div className=\"roundSummary\">\n            {tournament?.fights?.length < 2 ? \n            <div className=\"winners__card\">\n                <h2>Congrats</h2>\n                <p>{tournament?.winner}!</p>\n                <button onClick={executeDeleteTournament}>Delete Tournament</button>\n            </div>\n            : \n            <div className=\"roundSummary__content\">\n            <h2>Round Complete</h2>\n            <p>Are you ready for the next?</p>\n            <button onClick={executeStartNextRound}>Start</button>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default RoundSummary\n","/Users/Ben/Desktop/battleplanner-client/src/components/Restrictions.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/Participants.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/Rule.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/Restriction.js",[],"/Users/Ben/Desktop/battleplanner-client/src/components/Participant.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":3,"column":9,"nodeType":"121","messageId":"122","endLine":3,"endColumn":17},{"ruleId":"123","severity":1,"message":"124","line":31,"column":8,"nodeType":"125","endLine":31,"endColumn":10,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":6,"column":59,"nodeType":"121","messageId":"122","endLine":6,"endColumn":81},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tournament?.fights'. Either include it or remove the dependency array.","ArrayExpression",["130"],"'FETCH_TOURNAMENT_QUERY' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [tournament?.fights]",{"range":"133","text":"134"},[1206,1208],"[tournament?.fights]"]